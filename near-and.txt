def generate_final_sql(clean_data_df):

    # Get the unique blocks in the data
    blocks = clean_data_df['block_id'].unique()
    query_key = clean_data_df['query_key'].iloc[0]

    # Split blocks into include and exclude groups
    include_blocks = [block_id for block_id in blocks if clean_data_df[clean_data_df['block_id'] == block_id]['phrase_operator'].values[0] == 'INCLUDE MATCHES']
    exclude_blocks = [block_id for block_id in blocks if clean_data_df[clean_data_df['block_id'] == block_id]['phrase_operator'].values[0] == 'EXCLUDE MATCHES']

    # Sort Blocks
    include_blocks.sort()
    exclude_blocks.sort()

    # Check if any of the include Blocks are empty and return early if so
    if not include_blocks:
        print("No results found for the given Block ID. Exiting ...")
        return "" 

    def transform_to_tall_format(block_id):
        """Convert a block's result table from wide to tall format"""
        subqueries = [f"""
            SELECT
              r_id,
              '{block_id}' AS block_id,
              block_combo_logic,
              operator,
              t{i+1}_phrase_group_id AS phrase_group_id,
              t{i+1}_phrase_operator AS phrase_operator,
              t{i+1}_seq AS seq,
              t{i+1}_phrase AS phrase
            FROM {block_id}_results
            """ for i in range(len(include_blocks))]
        return ' UNION ALL '.join(subqueries)

    # Combine all transformed blocks
    transformed_sql = ' UNION ALL '.join([transform_to_tall_format(block_id) for block_id in include_blocks])
    group_by_clause = "GROUP BY r_id, block_id, block_combo_logic, operator, phrase_group_id, phrase_operator, seq, phrase"

    if clean_data_df['block_combo_logic'].values[0] == 'ALL BLOCKS':
        final_sql = f"""CREATE OR REPLACE TEMPORARY TABLE {query_key} AS (
          SELECT * 
          FROM ({transformed_sql})
          {group_by_clause}
        )"""
        print(f"Generated 'all blocks' SQL:\n\n{final_sql}\n")
    elif clean_data_df['block_combo_logic'].values[0] == 'ANY BLOCK':
        final_sql = f"""CREATE OR REPLACE TEMPORARY TABLE {query_key} AS (
          SELECT * 
          FROM ({transformed_sql})
          {group_by_clause}
        )"""
        print(f"Generated 'any block' SQL:\n\n{final_sql}\n")

    return final_sql
