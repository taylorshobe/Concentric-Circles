def generate_final_sql_union_structure(clean_data_df):

    blocks = clean_data_df['block_id'].unique()
    query_key = clean_data_df['query_key'].iloc[0]

    # Determine the number of phrase groups by examining the columns.
    # Assumes the naming convention is consistent and each phrase group has all columns (e.g., pcd, seq, utterance).
    max_phrase_groups = max([int(col.split('_t')[-1].split('_')[0]) for col in clean_data_df.columns if '_t' in col])

    # Function to generate the SQL for a particular block and phrase group.
    def generate_block_pg_sql(block_id, pg_num):
        return f"""
        SELECT r_id, '{block_id}' AS block_id, {pg_num} AS pg,
               {block_id}_t{pg_num}_pcd AS pcd,
               {block_id}_t{pg_num}_seq AS seq,
               {block_id}_t{pg_num}_utterance AS utterance
        FROM {block_id}_results
        """

    if clean_data_df['block_combo_logic'].values[0] == 'ANY BLOCK':
        union_sql_parts = [generate_block_pg_sql(block_id, pg) for block_id in blocks for pg in range(1, max_phrase_groups + 1)]
        union_sql = "\nUNION ALL\n".join(union_sql_parts)
        final_sql = f"CREATE OR REPLACE TEMPORARY TABLE {query_key} AS (\n\n{union_sql}\n)"
        return final_sql

    elif clean_data_df['block_combo_logic'].values[0] == 'ALL BLOCKS':
        # Create intersection CTE
        intersection_parts = "\n".join([f"INNER JOIN {block_id}_results AS t{i+1}\nON t1.r_id = t{i+1}.r_id" for i, block_id in enumerate(blocks[1:])])
        intersection_sql = f"WITH intersection AS (\nSELECT t1.r_id\nFROM {blocks[0]}_results AS t1\n{intersection_parts}\nGROUP BY t1.r_id\n)"

        # Create UNIONed results filtered by intersection
        union_filtered_parts = [f"{generate_block_pg_sql(block_id, pg)}\nINNER JOIN intersection\nON {block_id}_results.r_id = intersection.r_id" for block_id in blocks for pg in range(1, max_phrase_groups + 1)]
        union_filtered_sql = "\nUNION ALL\n".join(union_filtered_parts)

        final_sql = f"{intersection_sql}\n\nCREATE OR REPLACE TEMPORARY TABLE {query_key} AS (\n\n{union_filtered_sql}\n)"
        return final_sql

    else:
        raise ValueError("Invalid block_combo_logic value!")
