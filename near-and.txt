
import pandas as pd
import re
import dash
from dash import dash_table
from dash import html
from IPython.core.display import display, HTML


app = dash.Dash(__name__)

app.layout = html.Div([
    dash_table.DataTable(
        id='data-table-output',
        columns=table_columns,
        data=table_data,
        style_table={'height': '300px', 'overflowY': 'auto'},
        page_size=10,
        fill_width=True,
        style_data_conditional=[
            {
                'if': {'column_id': 'conversation'},
                'textAlign': 'left',
                'whiteSpace': 'normal',
                'height': 'auto'
            }
        ]
    )
])

if __name__ == '__main__':
    app.run_server(debug=True)

    
    
# Convert your DataFrame to dictionaries for use with the DataTable
table_data = conversation_df.to_dict("records")
table_columns = [{"name": i, "id": i} for i in conversation_df.columns]






# Create DataFrame from data dictionary
data = {
    'query_id': ['1234-567-8910111213141516', '1234-567-8910111213141516', '1234-567-8910111213141516', '1234-567-8910111213141516'],
    'block': ['A', 'A', 'A', 'B'],
    'operator': ['NEAR', 'NEAR', 'AND', 'None'],  # Block Operator ("Block ID Logic") (Match All, Near Required)
    'phrase_group': ['reset, change, update', 'password, login', 'value customer', 'customer login, customer sign in'],
    'phrase_match': ['exact', 'exact', 'exact', 'contains'],
    'phrase_operator': ['include matches', 'include matches', 'exclude matches', 'include matches']
}
 
input_data_df = pd.DataFrame(data)


# Sample conversation_df
conversation_data = {
    'record_id': ['1234-567-8910111213141516'],
    'conversation': ['This is a sample login conversation that needs price update. Also, for valued customer login mentions. Another conversation change where value customer does something.']
}
conversation_df = pd.DataFrame(conversation_data)




# Function to highlight phrases in a conversation
def highlight_phrases(conversation, phrases):
    for phrase_group in phrases:
        for phrase in phrase_group.split(","):
            phrase = phrase.strip()
            conversation = re.sub(r'(?<!<span style="background-color: yellow;">)\b{}\b(?!<\/span>)'.format(phrase), r'<span style="background-color: yellow;">\1</span>', conversation)
    return conversation

# Apply the highlighting
for idx, row in input_data_df.iterrows():
    query_id = row['query_id']
    phrases = input_data_df[input_data_df['query_id'] == query_id]['phrase_group'].tolist()
    conversation_df.loc[conversation_df['record_id'] == query_id, 'conversation'] = conversation_df[conversation_df['record_id'] == query_id]['conversation'].apply(lambda x: highlight_phrases(x, phrases))




# For demonstration purposes, display the results in Jupyter Notebook
for _, row in conversation_df.iterrows():
    display(HTML(row['conversation']))
