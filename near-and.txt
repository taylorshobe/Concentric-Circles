import pandas as pd
import re
import dash
from dash import dash_table
from dash import html
from IPython.core.display import display, HTML
import logging
from itertools import cycle



# Create DataFrame from data dictionary
data = {
    'query_id': ['1234-567-8910111213141516', '1234-567-8910111213141516', '1234-567-8910111213141516', '1234-567-8910111213141516'],
    'block': ['A', 'A', 'A', 'B'],
    'operator': ['NEAR', 'NEAR', 'AND', 'None'],  # Block Operator ("Block ID Logic") (Match All, Near Required)
    'phrase_group': ['reset, change, update', 'password, login', 'value customer', 'customer login, customer sign in'],
    'phrase_match': ['exact', 'exact', 'exact', 'contains'],
    'phrase_operator': ['include matches', 'include matches', 'exclude matches', 'include matches']
}
 
df_clean_data = pd.DataFrame(data)


# Sample conversation_df
transcript_sample = {
    'record_id': ['1234-567-8910111213141516'],
    'conversation': ['This is a sample login conversation that needs price update. Also, for valued customer login mentions. Another conversation change where value customer does something.']
}
df_transcript_sample = pd.DataFrame(transcript_sample)




# Define a list of colors
colors = ['yellow', 'cyan', 'magenta', 'green', 'blue', 'orange', 'red']

# Generate dynamic color mapping
color_map = {phrase_group: color for phrase_group, color in zip(df_clean_data['phrase_group'].tolist(), cycle(colors))}



# Function to highlight phrases in a conversation
# def highlight_phrases(conversation, phrases):
#     for phrase_group in phrases:
#         for phrase in phrase_group.split(","):
#             phrase = phrase.strip()
#             # Notice the addition of parenthesis () around the {} which captures the matched phrase
#             conversation = re.sub(r'(?<!<span style="background-color: yellow;">)\b({})\b(?!<\/span>)'.format(phrase), r'<span style="background-color: yellow;">\1</span>', conversation)
#     return conversation

# For Highlighting matches in Transcript
# def update_output(input_value):
#     # Extract all Phrase Group Values
#     all_phrases = df_clean_data['phrase_group'].tolist()
#     print(all_phrases)
#     logging.info(f"Extracted Phrases: {all_phrases}")    
#     # Apply the highlighting
#     df_transcript_sample['conversation'] = df_transcript_sample['conversation'].apply(lambda x: highlight_phrases(x, all_phrases))
    
#     return df_transcript_sample.to_dict('records')

# update_output(None)


# def highlight_phrases(conversation, phrases_color_map):
#     for phrase_group, color in phrases_color_map.items():
#         for phrase in phrase_group.split(","):
#             phrase = phrase.strip()
#             conversation = re.sub(
#                 r'(?<!<span style="background-color: {};">)\b({})\b(?!<\/span>)'.format(color, phrase), 
#                 r'<span style="background-color: {};">\1</span>'.format(color), 
#                 conversation
#             )
#     return conversation


def highlight_phrases(conversation, phrases_color_map):
    for phrase_group, color in phrases_color_map.items():
        for phrase in phrase_group.split(","):
            phrase = phrase.strip()
            conversation = re.sub(
                r'\b({})\b'.format(phrase),
                r'<span style="background-color: {};">\1</span>'.format(color), 
                conversation
            )
    return conversation


def update_output(input_value):
    # Use the dynamic color mapping
    df_transcript_sample['conversation'] = df_transcript_sample['conversation'].apply(lambda x: highlight_phrases(x, color_map))
    return df_transcript_sample.to_dict('records')

update_output(None)



# Convert your DataFrame to dictionaries for use with the DataTable
table_data = df_transcript_sample.to_dict("records")
table_columns = [{"name": i, "id": i, 'presentation': 'markdown' if i == 'conversation' else None} for i in df_transcript_sample.columns]


app = dash.Dash(__name__)

app.layout = html.Div([
    dash_table.DataTable(
        id='data-table-output',
        columns=table_columns,
        data=table_data,
        style_table={'height': '300px', 'overflowY': 'auto'},
        page_size=10,
        fill_width=True,
        style_data={'fontSize': '14px'},   # This line sets the font size for the entire table
        style_data_conditional=[
            {
                'if': {'column_id': 'conversation'},
                'textAlign': 'left',
                'whiteSpace': 'normal',
                'height': 'auto'
            }
        ],
        markdown_options={"html": True}
    )
])

if __name__ == '__main__':
    app.run_server(debug=True)


