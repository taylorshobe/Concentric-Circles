#... [rest of the code before the 'ALL BLOCKS' logic]

else:  # 'ALL BLOCKS' logic
    logging.info("Combining using 'ALL BLOCKS' logic.")

    inclusion_blocks = []
    exclusion_blocks = []

    for block_id in block_ids:
        phrase_operator = clean_data_df[clean_data_df['block_id'] == block_id]['phrase_operator'].iloc[0]
        if phrase_operator == 'INCLUDE MATCHES':
            inclusion_blocks.append(block_id)
        else:
            exclusion_blocks.append(block_id)

    inclusion_joins = " ".join([f"INNER JOIN {block}_transformed_results ON A.r_id = {block}_transformed_results.r_id" for block in inclusion_blocks[1:]])
    
    exclusion_joins = [f"LEFT JOIN {block}_transformed_results ON A.r_id = {block}_transformed_results.r_id" for block in exclusion_blocks]
    exclusion_where_clauses = [f"{block}_transformed_results.r_id IS NULL" for block in exclusion_blocks]

    cte = f"""
    WITH intersection AS (
        SELECT A.*
        FROM {inclusion_blocks[0]}_transformed_results AS A
        {inclusion_joins}
        {" ".join(exclusion_joins) if exclusion_blocks else ""}
        WHERE {" AND ".join(exclusion_where_clauses) if exclusion_blocks else "1=1"}
    )
    """

    union_query = "\nUNION ALL\n".join([f"SELECT * FROM {block}_transformed_results" for block in inclusion_blocks])
    main_query = f"""
    SELECT * 
    FROM (
        {union_query}
    ) T1
    INNER JOIN intersection T2 ON T1.r_id = T2.r_id
    GROUP BY {', '.join(all_columns)}
    """
    
    final_sql = f"\nCREATE OR REPLACE TEMPORARY TABLE {query_key} AS\n{cte}\n{main_query}"

#... [rest of the code after the 'ALL BLOCKS' logic]
