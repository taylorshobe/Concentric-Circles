def get_table_columns(block_id):
    """
    Retrieve columns of the table.
    This is a mock function and would typically involve a database metadata query.
    
    Args:
    - block_id (str): Block ID to determine table name.
    
    Returns:
    - list: Columns of the table.
    """
    # This is just a mock; in reality, you'd query the database system's metadata
    # For demonstration purposes, we'll return a mock list for the A_results table
    return ["r_id", "block_id", "block_combo_logic", "operator", 
            "t1_phrase_group_id", "t1_phrase_operator", "t1_seq", "t1_phrase", 
            "t2_phrase_group_id", "t2_phrase_operator", "t2_seq", "t2_phrase"]


def standardize_temp_table(block_id):
    """
    This function standardizes the structure of the given temp table.
    
    Args:
    - block_id (str): Block ID to determine table name.
    
    Returns:
    - str: SQL script to standardize the temp table
    """
    table_name = f"{block_id}_results"
    
    # Retrieve table columns
    columns = get_table_columns(block_id)
    
    # Identify number of phrase groups
    phrase_group_columns = [col.split('_')[0] for col in columns if "_phrase" in col]
    
    # The base structure columns that are not related to the phrase groups
    base_columns = ["r_id", "block_id", "block_combo_logic", "operator"]
    
    union_queries = []
    for pg in phrase_group_columns:
        query = f"""
        SELECT 
            r_id,
            block_id,
            block_combo_logic,
            operator,
            {pg}phrase_group_id AS phrase_group_id,
            {pg}phrase_operator AS phrase_operator,
            {pg}seq AS seq,
            {pg}phrase AS phrase
        FROM {table_name}
        """
        union_queries.append(query)
    
    # Combine all UNION queries
    final_query = "\nUNION ALL\n".join(union_queries)
    
    return final_query

# Test the function
print(standardize_temp_table("A"))
