def generate_final_sql(cleaned_data_df):
    try:
        # Get the unique blocks in the data
        blocks = cleaned_data_df['block_id'].unique()
        query_key = cleaned_data_df['query_key'].iloc[0]

        # Split blocks into include and exclude groups
        include_blocks = [block_id for block_id in blocks if cleaned_data_df[cleaned_data_df['block_id'] == block_id]['phrase_operator'].values[0] == 'INCLUDE MATCHES']
        exclude_blocks = [block_id for block_id in blocks if cleaned_data_df[cleaned_data_df['block_id'] == block_id]['phrase_operator'].values[0] == 'EXCLUDE MATCHES']

        # Construct SQL for 'ALL BLOCKS'
        if cleaned_data_df['block_combo_logic'].values[0] == 'ALL BLOCKS':
            join_sql_parts = []
            
            # Start with the first inclusionary block
            join_sql_parts.append(f"SELECT r_id FROM {include_blocks[0]}_results")
            
            # Inner join with all other inclusionary blocks
            for block_id in include_blocks[1:]:
                join_sql_parts.append(f"INNER JOIN {block_id}_results AS t{block_id} ON t{block_id}.r_id = t{include_blocks[0]}.r_id")
            
            # Left join with all exclusionary blocks and add WHERE clauses to filter them out
            for block_id in exclude_blocks:
                join_sql_parts.append(f"LEFT JOIN {block_id}_results AS tx{block_id} ON tx{block_id}.r_id = t{include_blocks[0]}.r_id")
                join_sql_parts.append(f"WHERE tx{block_id}.r_id IS NULL")
            
            all_sql = " ".join(join_sql_parts)

            final_sql = f"""CREATE OR REPLACE TEMPORARY TABLE {query_key} AS (\n\n{all_sql}\n)"""
            print(f"Generated 'all blocks' SQL:\n\n{final_sql}\n")
            return final_sql
        
        # Construct SQL for 'ANY BLOCK'
        elif cleaned_data_df['block_combo_logic'].values[0] == 'ANY BLOCK':
            union_sql_parts = [f"SELECT r_id FROM {block_id}_results" for block_id in include_blocks]
            any_sql = "\n\nUNION ALL\n\n".join(union_sql_parts)
            final_sql = f"""CREATE OR REPLACE TEMPORARY TABLE {query_key} AS (\n\n{any_sql}\n)"""
            print(f"Generated 'any block' SQL:\n\n{final_sql}\n")
            return final_sql

    except Exception as e:
        print(f"Error generating final SQL: {str(e)}")
        return None
