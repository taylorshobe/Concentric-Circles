
import dash
import dash_bootstrap_components as dbc
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output, State

# Define the alert for successful upload
upload_success_alert = dbc.Alert("File successfully uploaded!", color="success", id="upload-success-alert", is_open=False)

# Layout for the Upload File page
upload_file_page = dbc.Card([
    dbc.CardHeader([
        dbc.Row([
            dbc.Col(html.H1('Upload File', className="display-6",
                            style={'text-align': 'right', 'color': '#10000'}), width=11),
            dbc.Col(html.Img(src='assets/upload_icon.png', height=60, width=60, style={'float': 'right'}),
                    width=1)
        ], align='center', style={'margin-bottom': '5px', 'margin-top': '5px'}),
    ], style={'margin-bottom': '0px', 'border-bottom': '0px', 'background-color': '#FFFFFF'}),

    dbc.CardBody([
        # Start Content 
        dbc.Row([
            dbc.Col(upload_success_alert, width=12)  # Alert for successful upload
        ]),
        dbc.Row([
            dbc.Col([
                dcc.Upload(
                    id='upload-data',
                    children=html.Div([
                        'Drag and Drop or ',
                        html.A('Select Files')
                    ]),
                    style={
                        'width': '100%',
                        'height': '60px',
                        'lineHeight': '60px',
                        'borderWidth': '1px',
                        'borderStyle': 'dashed',
                        'borderRadius': '5px',
                        'textAlign': 'center',
                        'margin': '10px'
                    },
                    multiple=True
                ),
                html.Div(id='output-data-upload'),
            ], width=12)
        ]),
        # Placeholder for additional content or features
        dbc.Row([
            dbc.Col([
                # content
            ], width=12)
        ]),
        # End Content
    ], style={'height': '85vh', 'overflow-y': 'auto'}),
], style={'height': '98vh', 'overflow-y': 'hidden'})






from dash.exceptions import PreventUpdate
import pandas as pd
from io import StringIO
import base64
from google.cloud import bigquery

@app.callback(
    Output('output-data-upload', 'children'),
    Output('upload-success-alert', 'is_open'),  # Output for the success alert
    Input('upload-data', 'contents'),
    State('upload-data', 'filename')
)
def update_output(contents, filename):
    if contents is None:
        raise PreventUpdate

    content_type, content_string = contents.split(',')
    decoded = base64.b64decode(content_string)
    try:
        if 'csv' in filename:
            df = pd.read_csv(StringIO(decoded.decode('utf-8')))
        elif 'txt' in filename:
            df = pd.read_csv(StringIO(decoded.decode('utf-8')))
        elif 'xls' in filename:
            df = pd.read_excel(StringIO(decoded))
        else:
            raise ValueError("Unsupported file type")

        # Assuming you have a function `save_to_bigquery` to save df to BigQuery.
        # save_to_bigquery(df)

        # If everything goes fine
        return None, True  # Return True to open the success alert

    except Exception as e:
        return str(e), False  # Return False to keep the success alert closed


