
# Advanced apostrophy-handling
if phrase_grid_data == []:
    bad_count = 0
else:
    # Updated regex pattern
    # Pattern looks for:
    # 1. an apostrophe that is not between alphabets (either at the start, end, or surrounded by non-alphabets)
    # 2. any other character that's not an alphanumeric, space, comma, or semicolon
    # 3. other undesired patterns like consecutive commas, semicolons, etc.
    mask = df_phrase_grid['Phrase Group'].str.contains(
        r"(?<!\w)'|'(?!\w)|[^A-Za-z0-9 ,;]|,,+|;;+|^\s*,|^\s*;|,\s*$|;\s*$"
    )
    bad_count = len(df_phrase_grid[mask])


(?<!\w)' checks for an apostrophe that does not have a word character (alphanumeric or underscore) before it.
'(?!\w) checks for an apostrophe that does not have a word character after it.
By combining these two patterns with an OR (|), we catch any "bad" apostrophe usage.




# clean_data_()
# Remove apostrophes
phrase_group = phrase_group.replace("'", "")

