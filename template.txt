import re
from dash import html

# Create function to highlight phrase matches
def highlight_phrases(conversation, phrases_color_map):
    
    # Nested function to apply highlighting to a matched phrase
    def apply_highlight(phrase, color):
        # Return a styled Dash component to highlight the phrase
        return html.Span(children=[html.Strong(phrase)], style={"color": color})

    # Initialize an empty list to store the resulting Dash components
    highlighted_components = []

    # This list will be used to store all matches we find in the conversation
    matches = []   

    # Loop through each group of phrases and their associated colors in the provided map
    for phrase_group, color in phrases_color_map.items():
        # Split the phrase group into individual phrases
        for phrase in phrase_group.split(","):
            # Remove any leading or trailing whitespace from the phrase
            phrase = phrase.strip()            

            # Patterns for start of string and within string
            patterns = [
                r'^{}(?=$|[^a-zA-Z0-9\'])', 
                r'(?<=[^a-zA-Z0-9\']){}(?=$|[^a-zA-Z0-9\'])'
            ]

            for pattern in patterns:
                for match in re.finditer(pattern.format(re.escape(phrase)), conversation, flags=re.IGNORECASE):
                    # Extract the start and end positions of the matched phrase
                    start, end = match.span()
                    # Add the details of this match to our matches list
                    matches.append((start, end, phrase, color))

    # Sort the matches by start position
    matches.sort(key=lambda x: (x[0], -len(x[2])))

    # Variable to keep track of where we left off in the conversation
    remaining_start_index = 0   

    # Process each match
    for start, end, phrase, color in matches:
        # If the current match starts after our last processed position
        if start >= remaining_start_index:
            # Append the text from our last position up to the start of this match
            highlighted_components.append(conversation[remaining_start_index:start])           
            # Append the matched phrase with highlighting
            highlighted_components.append(apply_highlight(phrase, color))           
            # Update our last processed position
            remaining_start_index = end

    # Append any remaining text from the conversation
    highlighted_components.append(conversation[remaining_start_index:])   

    return highlighted_components
