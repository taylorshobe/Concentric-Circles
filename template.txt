import dash_html_components as html
import dash_bootstrap_components as dbc
import dash_core_components as dcc

# Layout for the Upload File page
upload_file_page = dbc.Card([
    dbc.CardHeader([
        dbc.Row([
            dbc.Col(html.H1('Upload File', className="display-6",
                            style={'text-align': 'right', 'color': '#10000'}), width=11),
            dbc.Col(html.Img(src='assets/upload_icon.png', height=60, width=60, style={'float': 'right'}),
                    width=1)
        ], align='center', style={'margin-bottom': '5px', 'margin-top': '5px'}),
    ], style={'margin-bottom': '0px', 'border-bottom': '0px', 'background-color': '#FFFFFF'}),

    dbc.CardBody([
        # Start Content 
        dbc.Row([
            dbc.Col(upload_success_alert, width=12)  # Alert for successful upload
        ]),
        dbc.Row([
            dbc.Col([
                dcc.Upload(
                    id='upload-data',
                    children=html.Div([
                        'Drag and Drop or ',
                        html.A('Select Files')
                    ]),
                    style={
                        'width': '100%',
                        'height': '60px',
                        'lineHeight': '60px',
                        'borderWidth': '1px',
                        'borderStyle': 'dashed',
                        'borderRadius': '5px',
                        'textAlign': 'center',
                        'margin': '10px'
                    },
                    multiple=False  # Allowing only single file uploads
                ),
                html.Div(id='output-data-upload'),
            ], width=12)
        ]),
        dbc.Row([
            dbc.Col([
                # New components for displaying elapsed time and number of rows uploaded
                html.Div(id='time-elapsed', children="Time Elapsed: -"),
                html.Div(id='num-rows-uploaded', children="Rows Uploaded: -"),
                
                # DataTable to preview the data
                dash_table.DataTable(
                    id='table-preview',
                    columns=[
                        {"name": "Record_ID", "id": "Record_ID"},
                    ],
                    style_cell={
                        'textAlign': 'center'
                    },
                    page_size=10  # Displaying only 10 rows at a time
                )
            ], width=12)
        ]),
        # Placeholder for additional content or features
        dbc.Row([
            dbc.Col([], width=12)
        ]),
        # End Content
    ], style={'height': '85vh', 'overflow-y': 'auto'}),
], style={'height': '98vh', 'overflow-y': 'hidden'})








@app.callback(
    Output('output-data-upload', 'children'),
    Output('upload-success-alert', 'is_open'),
    Output('table-preview', 'data'),
    Output('time-elapsed', 'children'),
    Output('num-rows-uploaded', 'children'),
    Input('upload-data', 'contents'),
    State('upload-data', 'filename')
)
def update_output(contents, filename):
    # Existing code...

    # After saving to BigQuery, get the elapsed time and number of rows
    elapsed_time = time_taken_to_upload  # You'll need to calculate this in your function
    num_rows = len(df)

    # If everything goes fine
    return None, True, df.head(10).to_dict('records'), f"Time Elapsed: {elapsed_time} seconds", f"Rows Uploaded: {num_rows}"








import base64
import pandas as pd
import datetime

@app.callback(
    [
        Output('output-data-upload', 'children'),
        Output('upload-success-alert', 'is_open'),
        Output('table-preview', 'data'),
        Output('time-elapsed', 'children'),
        Output('num-rows-uploaded', 'children')
    ],
    Input('upload-data', 'contents'),
    State('upload-data', 'filename')
)
def update_output(contents, filename):
    start_time = datetime.datetime.now()  # Start time for the upload

    if contents is None:
        raise PreventUpdate

    content_type, content_string = contents.split(',')
    decoded = base64.b64decode(content_string)

    try:
        if 'csv' in filename:
            df = pd.read_csv(io.StringIO(decoded.decode('utf-8')))
        elif 'txt' in filename:
            df = pd.read_csv(io.StringIO(decoded.decode('utf-8')))
        elif 'xls' in filename:
            df = pd.read_excel(io.BytesIO(decoded))
        else:
            raise ValueError("Unsupported file type")

        save_to_bigquery(df)  # Save to BigQuery

        # Calculate the elapsed time and number of rows uploaded
        end_time = datetime.datetime.now()  # End time for the upload
        elapsed_time = (end_time - start_time).seconds
        num_rows = len(df)

        # Return the appropriate messages and data
        return (None,
                True, 
                df.head(10).to_dict('records'),  # Displaying first 10 rows in the DataTable
                f"Time Elapsed: {elapsed_time} seconds",
                f"Rows Uploaded: {num_rows}")

    except Exception as e:
        # In case of any other errors, return the appropriate message
        return (f"Error: {e}", False, [], "Time Elapsed: -", "Rows Uploaded: -")




