





import dash_table
import dash_bootstrap_components as dbc
import dash_core_components as dcc
import dash_html_components as html

# Layout for the Upload File page
upload_file_page = dbc.Card([
    dbc.CardHeader([
        dbc.Row([
            dbc.Col(html.H1('Upload File', className="display-6",
                            style={'text-align': 'right', 'color': '#10000'}), width=11),
            dbc.Col(html.Img(src='assets/upload_icon.png', height=60, width=60, style={'float': 'right'}),
                    width=1)
        ], align='center', style={'margin-bottom': '5px', 'margin-top': '5px'}),
    ], style={'margin-bottom': '0px', 'border-bottom': '0px', 'background-color': '#FFFFFF'}),

    dbc.CardBody([
        # Start Content 
        dbc.Row([
            dbc.Col(upload_success_alert, width=12)  # Alert for successful upload
        ]),
        dbc.Row([
            dbc.Col([
                dcc.Upload(
                    id='upload-data',
                    children=html.Div([
                        'Drag and Drop or ',
                        html.A('Select Files')
                    ]),
                    style={
                        'width': '100%',
                        'height': '60px',
                        'lineHeight': '60px',
                        'borderWidth': '1px',
                        'borderStyle': 'dashed',
                        'borderRadius': '5px',
                        'textAlign': 'center',
                        'margin': '10px'
                    },
                    multiple=False  # Only single file allowed now
                ),
                html.Div(id='output-data-upload'),
            ], width=12)
        ]),
        dbc.Row([
            dbc.Col([
                dash_table.DataTable(
                    id='table-preview',
                    columns=[{"name": "Record_ID", "id": "record_id"}],
                    data=[],
                    page_size=10  # Show only 10 rows
                )
            ], width=12)
        ]),
        # Placeholder for additional content or features
        dbc.Row([
            dbc.Col([
                # content
            ], width=12)
        ]),
        # End Content
    ], style={'height': '85vh', 'overflow-y': 'auto'}),
], style={'height': '98vh', 'overflow-y': 'hidden'})









import dash_table

# Within your upload_file_page layout
dbc.Row([
    dbc.Col([
        dash_table.DataTable(
            id='table-preview',
            columns=[{"name": "Record_ID", "id": "record_id"}],
            data=[],
            page_size=10  # Show only 10 rows
        )
    ], width=12)
])





@app.callback(
    Output('output-data-upload', 'children'),
    Output('upload-success-alert', 'is_open'),  # Output for the success alert
    Output('table-preview', 'data'),  # Output for the table data
    Input('upload-data', 'contents'),
    State('upload-data', 'filename')
)
def update_output(contents, filename):
    if contents is None:
        raise PreventUpdate

    content_type, content_string = contents.split(',')
    decoded = base64.b64decode(content_string)
    try:
        if 'csv' in filename:
            df = pd.read_csv(StringIO(decoded.decode('utf-8')))
        elif 'txt' in filename:
            df = pd.read_csv(StringIO(decoded.decode('utf-8')))
        elif 'xls' in filename:
            df = pd.read_excel(StringIO(decoded))
        else:
            raise ValueError("Unsupported file type")

        save_to_bigquery(df)  # Save to BigQuery
        
        # Return data for the table preview
        table_data = df.head(10).to_dict('records')  # Convert first 10 rows to list of dictionaries

        # If everything goes fine   
        return None, True, table_data  # Return True to open the success alert and data for the table

    except Exception as e:
        print(e)  # It's good to print the exception for debugging purposes
        return f"An error occurred: {e}", False, []  # Return the error message and empty data for the table
