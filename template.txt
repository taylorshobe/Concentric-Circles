@callback(
    Output("block-match", "value"), # should only be flipped if there is a standalone excludes block
    Output("block-a-operator", "on"), # should be flipped to match all if 1 or more exclude phrase groups in block
    Output("block-b-operator", "on"), # should be flipped to match all if 1 or more exclude phrase groups in block
    Output("block-c-operator", "on"), # should be flipped to match all if 1 or more exclude phrase groups in block
    Output("block-d-operator", "on"), # should be flipped to match all if 1 or more exclude phrase groups in block
    Output("block-e-operator", "on"), # should be flipped to match all if 1 or more exclude phrase groups in block
    Output("block-match", "options"),
    Input("query-load-button", "n_clicks"),
    Input("phrase-grid", "cellValueChanged"),
    State("phrase-grid", "rowData"),
    prevent_initial_call=True
)
def force_block_match(load_clicks, phrase_grid_changes, phrase_grid_data):

    from dash import no_update

    # Convert phrase_grid_data to DataFrame
    df_phrase_grid = pd.DataFrame(phrase_grid_data)

    # Check if any block has a standalone "Exclude Matches"
    standalone_exclude_exists = df_phrase_grid[
        (df_phrase_grid['Phrase Operator'] == 'Exclude Matches')
        & (df_phrase_grid.groupby('Block')['Block'].transform('count') == 1)
    ].shape[0] > 0

    # Update global block match value based on the condition
    all_block_match_val = 'All' if standalone_exclude_exists else no_update

    # Update options based on the standalone "Exclude Matches" condition
    all_block_match_opt = [{"label": "Any Block", "value": 'Any', 'disabled': standalone_exclude_exists},
                           {"label": "All Blocks", "value": 'All'}]

    # Calculate exclusion counts for each block
    exclude_counts = {
        block: len(df_phrase_grid[(df_phrase_grid['Phrase Operator'] == 'Exclude Matches') & (df_phrase_grid['Block'] == block)])
        for block in ['A', 'B', 'C', 'D', 'E']
    }

    # Set block match values based on exclusion counts
    a_block_match_val = True if exclude_counts['A'] >= 1 else no_update
    b_block_match_val = True if exclude_counts['B'] >= 1 else no_update
    c_block_match_val = True if exclude_counts['C'] >= 1 else no_update
    d_block_match_val = True if exclude_counts['D'] >= 1 else no_update
    e_block_match_val = True if exclude_counts['E'] >= 1 else no_update

    return all_block_match_val, a_block_match_val, b_block_match_val, c_block_match_val, d_block_match_val, e_block_match_val, all_block_match_opt
