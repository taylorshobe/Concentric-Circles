import pandas as pd
import re

def get_daily_phrase_counts(phrase_list, sql_data):
    # Create an empty DataFrame to store all matched records
    matched_records = pd.DataFrame(columns=sql_data.columns.tolist() + ['phrase'])

    # Loop through each phrase in the phrase_list
    for phrase in phrase_list:
        # Create a regex pattern for the current phrase
        pattern = re.compile(r'\b' + re.escape(phrase) + r'\b', flags=re.IGNORECASE)
        
        # Check each row in the SQL data for matches
        sql_data['match'] = sql_data['utterance'].apply(lambda x: bool(pattern.search(x)))
        
        # Filter out rows where a match was found
        matched_rows = sql_data[sql_data['match']]
        
        # Add a new column 'phrase' to matched_rows and set its value to the current phrase
        matched_rows['phrase'] = phrase
        
        # Append matched_rows to matched_records
        matched_records = matched_records.append(matched_rows, ignore_index=True)

    # Drop the 'match' column since it's no longer needed
    matched_records.drop('match', axis=1, inplace=True)

    # Group by 'date', 'record_id', 'timestamp' and 'phrase' and count the number of occurrences
    daily_counts = matched_records.groupby(['date', 'record_id', 'timestamp', 'phrase']).size().reset_index(name='count')

    # Aggregate to get total daily count for each phrase
    total_daily_counts = daily_counts.groupby(['date', 'phrase']).agg({'count': 'sum'}).reset_index()

    return total_daily_counts

def get_daily_phrase_counts_from_df(df_clean_data, sql_data):
    # Extracting the phrases from the DataFrame
    phrase_group = df_clean_data['phrase_group'].tolist()
    
    # Now call the original function
    return get_daily_phrase_counts(phrase_group, sql_data)

# Usage:
# Assuming you've already fetched sql_data from your SQL table and have df_clean_data loaded
# result_df = get_daily_phrase_counts_from_df(df_clean_data, sql_data)
# print(result_df)
