
import dash_html_components as html

def highlight_phrases(conversation, phrases_color_map):
    highlighted = []  # List to store Dash components

    # Helper function to apply highlighting
    def apply_highlight(phrase, color):
        return html.Span(children=[html.Strong(phrase)], style={"color": color})

    words = conversation.split()
    for word in words:
        # Initialize the word_component with the word itself (no styling)
        word_component = word
        for phrase_group, color in phrases_color_map.items():
            for phrase in phrase_group.split(","):
                phrase = phrase.strip()
                if re.match(r'\b{}\b'.format(phrase), word):
                    # If the word matches a phrase, wrap it with the highlight
                    word_component = apply_highlight(word, color)
        highlighted.append(word_component)
        highlighted.append(" ")  # Add space after each word

    return highlighted


colors = ['cyan', 'magenta', 'green', 'blue', 'orange', 'red']
color_map = {phrase_group: color for phrase_group, color in zip(phrase_group_values, cycle(colors))} 

# This line is unnecessary since you're now directly applying the highlighting in generate_transcript_utterance function.
# df_transcript_sample['conversation'] = df_transcript_sample['conversation'].apply(lambda x: highlight_phrases(x, color_map))




# When you're constructing your div in generate_transcript_utterance function:
html.P(children=highlight_phrases(row["conversation"], color_map))





import dash_html_components as html
import re

import dash_html_components as html
import re

def highlight_phrases(conversation, phrases_color_map):    
    def apply_highlight(match, color):     
        phrase = match.group()  # Extract the matched phrase from the match object
        return html.Span(children=[html.Strong(phrase)], style={"color": color})  # Return a styled Dash component

    # Initialize an empty list to store the resulting Dash components
    highlighted_components = []

    # Variable to keep track of where in the conversation string we are,
    # ensuring that we don't miss out on any parts of the conversation.
    remaining_start_index = 0

    # Loop over each group of phrases and their associated colors
    for phrase_group, color in phrases_color_map.items():
        
        # Split the phrase group into individual phrases (assuming they are comma-separated)
        for phrase in phrase_group.split(","):
            phrase = phrase.strip()  # Remove any leading or trailing whitespace
            
            # Find all occurrences of the phrase in the conversation using regex
            for match in re.finditer(r'\b{}\b'.format(phrase), conversation, flags=re.IGNORECASE):
                
                # Get the start and end indices of the matched phrase in the conversation
                start, end = match.span()

                # Append the text that came before this match, without any highlighting
                highlighted_components.append(conversation[remaining_start_index:start])

                # Append the matched phrase with highlighting
                highlighted_components.append(apply_highlight(match, color))

                # Update the remaining_start_index to after this match, so we can continue from here in the next iteration
                remaining_start_index = end

    # After all phrases have been checked, append any remaining text after the last match
    highlighted_components.append(conversation[remaining_start_index:])

    return highlighted_components






---------------------------------------------------------------------------------------------------

INCORPORATE RECORD_ID

children=[
    html.Div([
        html.H6(f'Record ID: {row["Record_ID"]}'),
        html.Div([
            html.H5(row["pcd"], style={'margin': '0px'}),
            html.P(row["seq"], style={'margin': '0px'}),
            html.P(row["conversation"])
        ], style={
            "background-color": bg_color,
            'margin': '10px',
            'padding': '10px',
            'border-radius': '10px'
        })
    ], style={
        'border': '2px solid black',
        'padding': '5px',
        'width': '80%'
    })
]





