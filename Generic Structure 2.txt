
def highlight_phrases(conversation, phrases_color_map):    
    def apply_highlight(match, color):     
        phrase = match.group()  # Extract the matched phrase from the match object
        return html.Span(children=[html.Strong(phrase)], style={"color": color})  # Return a styled Dash component

    # Initialize an empty list to store the resulting Dash components
    highlighted_components = []

    # Variable to keep track of where in the conversation string we are,
    # ensuring that we don't miss out on any parts of the conversation.
    remaining_start_index = 0

    # Loop over each group of phrases and their associated colors
    for phrase_group, color in phrases_color_map.items():
        
        # Split the phrase group into individual phrases (assuming they are comma-separated)
        for phrase in phrase_group.split(","):
            phrase = phrase.strip()  # Remove any leading or trailing whitespace
            
            # Find all occurrences of the phrase in the conversation using regex
            for match in re.finditer(r'\b{}\b'.format(phrase), conversation, flags=re.IGNORECASE):
                
                # Get the start and end indices of the matched phrase in the conversation
                start, end = match.span()

                # Append the text that came before this match, without any highlighting
                highlighted_components.append(conversation[remaining_start_index:start])

                # Append the matched phrase with highlighting
                highlighted_components.append(apply_highlight(match, color))

                # Update the remaining_start_index to after this match, so we can continue from here in the next iteration
                remaining_start_index = end

    # After all phrases have been checked, append any remaining text after the last match
    highlighted_components.append(conversation[remaining_start_index:])

    return highlighted_components


from itertools import cycle

colors = ['darkblue', 'forestgreen', 'maroon', 'purple', 'charcoal', 'teal', 'olive', 'chocolate', 'navy']
# Assuming phrase_group_values and colors are already defined
color_cycler = cycle(colors)
color_map = {phrase_group: next(color_cycler) for phrase_group in phrase_group_values}


---------------------------------------------------------------------------------------------------

INCORPORATE RECORD_ID

for _, row in df.iterrows():
    # Determine the background color based on 'pcd'
    bg_color = 'lightyellow' if row['pcd'] == 'Customer' else 'white'
    
    # Create Dash Div component for the conversation details
    div_component = html.Div(
        children=[
            html.H5(row["pcd"], style={'margin': '0px'}),
            html.P(row["seq"], style={'margin': '0px'}),
            # Using the highlight_phrases function to mark certain phrases in the conversation
            html.P(children=highlight_phrases(row["conversation"], color_map))
        ],
        style={
            "background-color": bg_color,
            'padding': '5px',
            'border-radius': '10px',
            'margin': '10px'
        }
    )
    
    # Create a parent Div to encapsulate the div_component and display the Record ID
    record_div = html.Div(
        children=[
            html.H6(f'Record ID: {row["Record_ID"]}'),
            div_component
        ],
        style={
            'border': '2px solid black',
            'padding': '5px',
            'width': '80%'
        }
    )
    
    children_elements.append(record_div)
    children_elements.append(html.Br())  # Add a break after each div


